server:
  port: 8092
  tomcat:
    threads:
      max: 8
logging:
  config: classpath:log4j2.xml

# 限流配置
resilience4j.ratelimiter:
  configs:
    default:
      limitForPeriod: 10
      limitRefreshPeriod: 60s
      timeoutDuration: 1s
  instances:
    backendA:
      baseConfig: default
    backendB:
      limitForPeriod: 5
      limitRefreshPeriod: 60s
      timeoutDuration: 0

# 超时配置
resilience4j.timelimiter:
  configs:
    default:
      timeoutDuration: 3s
      cancelRunningFuture: true
  instances:
    backendA:
      baseConfig: default
    backendB:
      baseConfig: default

#重试配置
resilience4j.retry:
  instances:
    backendB:
      maxRetryAttempts: 3
      waitDuration: 5s
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
      ignoreExceptions:
        - org.springframework.web.client.HttpClientErrorException
    backendA:
      maxRetryAttempts: 3
      waitDuration: 10s
      retryExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException

# 熔断器配置
resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 100
      permittedNumberOfCallsInHalfOpenState: 10
      waitDurationInOpenState: 10
      failureRateThreshold: 60
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
  instances:
    backendC:
      baseConfig: default
    someOtherService:
      registerHealthIndicator: true
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 3
      slidingWindowType: TIME_BASED
      minimumNumberOfCalls: 20
      waitDurationInOpenState: 50s
      failureRateThreshold: 50
      eventConsumerBufferSize: 10

#舱壁模式配置
resilience4j.bulkhead:
  instances:
    backendC:
      maxConcurrentCalls: 4
      maxWaitDuration: 10ms